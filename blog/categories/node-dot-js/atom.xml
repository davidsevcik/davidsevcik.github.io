<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Node.js | Dev Soup]]></title>
  <link href="http://davidsevcik.github.io/blog/categories/node-dot-js/atom.xml" rel="self"/>
  <link href="http://davidsevcik.github.io/"/>
  <updated>2014-02-18T00:25:19+01:00</updated>
  <id>http://davidsevcik.github.io/</id>
  <author>
    <name><![CDATA[David Sevcik]]></name>
    <email><![CDATA[david.sevcik@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[<small>Design Patterns in Node.js:</small> Module Pattern]]></title>
    <link href="http://davidsevcik.github.io/2014-02-12-design-patterns-node-js-module-pattern/"/>
    <updated>2014-02-12T10:17:20+01:00</updated>
    <id>http://davidsevcik.github.io/design-patterns-node-js-module-pattern</id>
    <content type="html"><![CDATA[<p>Today I start the series of blog spots dedicated to design patterns used in Node.js development. As developers you are probably familiar with the <a href="http://sourcemaking.com/design_patterns">GoF design patterns</a>. These work best with the programming languages using class inheritance but JavaScript belongs to the <a href="http://en.wikipedia.org/wiki/Prototype-based_programming">prototype-based</a> category of languages. Moreover the Node.js is specific for an asynchronism. Because of this I see useful to revise already known patterns from GoF and add some more specific to JavaScript or Node.js. </p>

<p>There is no order of particular patterns in this series. I plan to simply pick those which I use the most in my current projects. For start I have chose a Module Pattern.</p>

<h1>Code first</h1>

<p>&ldquo;`javascript Synchronous version
var privateStaticVariable = &lsquo;sample&rsquo;;</p>

<p>// constructor function
exports.createInstance = function(context) {
    var privateVariable = 10;</p>
<div class="highlight"><pre><code class="text">var privateFunction = function() {
    return privateVariable * context.multiplier;           
}

var instance = {
    publicVariable: 7,
    publicFunction: function(x) {
        return privateVariable + x;
    },
    chainableFunction: function(sum) {
        privateVariable = instance.publicFunction(sum);
        return instance;
    }
}

return instance;
</code></pre></div>
<p>}
&rdquo;`</p>

<p>&ldquo;`javascript Asynchronous version with callback
var privateStaticVariable = &lsquo;sample&rsquo;;</p>

<p>// constructor function
exports.createInstance = function(context, callback) {
    var privateVariable = 10;</p>
<div class="highlight"><pre><code class="text">var privateFunction = function() {
    return privateVariable * context.multiplier;           
}

var instance = {
    publicVariable: 7,
    publicFunction: function(x) {
        return privateVariable + x;
    },
    chainableFunction: function(sum) {
        privateVariable = instance.publicFunction(sum);
        return instance;
    }
}

someAsyncCall(function(err) {
    if (err) return callback(err);
    return callback(null, instance);
});
</code></pre></div>
<p>}
&rdquo;`</p>

<h1>Characteristics</h1>

<p>Module Pattern comprise 2 from 4 major principles of object-oriented programming - the encapsulation and abstraction.</p>

<p>Firstly it <strong>encapsulate data</strong> and provide the client of such module with just public API methods. For JavaScript this is the easiest way how to substitute the explicit public/private variables scoping. </p>

<p>Secondly the Module Pattern provide a <strong>layer of abstraction</strong>. It means that client using such module do not have to care about the process of the instantiation itself. He needs to know parameters of called <em>constructor function</em> and api of <em>returned instance</em>. This define an <em>interface</em> between client and module. If the interface remains the same it&rsquo;s implementation can evolve freely without change on a client.</p>

<p>For example we can incorporate into Module Pattern another pattern called Factory Method. In the code example above the constructor method <code>createInstance</code> simply returns a new object instance for every call. But we can use Factory Method when we have a limited poll of instances and we would like to provide client with one from them. All this is change of the implementation but the interface for a client do not change. More about Factory Method pattern in Node.js you will find in a next blog post.</p>

<h1>Usage example</h1>

<p>I try to desing Node.js apps as a net of loosely coupled services. In such scheme every service is developed according Module Pattern and benefit from a uniform interface. In such case I use slightly modified vocabulary - <code>init</code> instead of <code>createInstance</code> and <code>api</code> instead of <code>instance</code>.</p>
<div class="highlight"><pre><code class="javascript"><span class="nx">exports</span><span class="p">.</span><span class="nx">init</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">connection</span><span class="p">;</span>

    <span class="kd">var</span> <span class="nx">api</span> <span class="o">=</span> <span class="p">{</span>
        <span class="nx">list</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">query</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>  <span class="cm">/* implementation */</span>  <span class="p">},</span>
        <span class="nx">create</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>  <span class="cm">/* implementation */</span>  <span class="p">},</span>
        <span class="nx">update</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>  <span class="cm">/* implementation */</span>  <span class="p">},</span>
        <span class="nx">destroy</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>  <span class="cm">/* implementation */</span>  <span class="p">}</span>
    <span class="p">}</span>

    <span class="nx">openSomeConnection</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">connection_</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
        <span class="nx">connection</span> <span class="o">=</span> <span class="nx">connection_</span><span class="p">;</span>
        <span class="k">return</span> <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">api</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div>
<h1>Further Reading</h1>

<ul>
<li>Book <a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">JavaScript: The Good Parts</a> by Douglas Crockford who popularized this pattern in JavaScript</li>
</ul>
]]></content>
  </entry>
  
</feed>
